# Generated by carnix 0.9.8: carnix generate-nix --standalone --src ./.
with import <nixpkgs> {};
with buildRustCrateHelpers;
let inherit (lib.lists) fold;
    inherit (lib.attrsets) recursiveUpdate;
  cratesIO = (callPackage ./crates-io.nix { });
in
rec {
  crates = cratesIO // rec {
# sonic-server-1.1.8

    crates.sonic_server."1.1.8" = deps: { features?(features_.sonic_server."1.1.8" deps {}) }: buildRustCrate {
      crateName = "sonic-server";
      version = "1.1.8";
      authors = [ "Valerian Saliou <valerian@valeriansaliou.name>" "Baptiste Jamin <baptistejamin@gmail.com>" ];
      edition = "2018";
      src = exclude [ ".git" "target" ] ./.;
      crateBin =
        [{  name = "sonic";  path = "src/main.rs"; }];
      dependencies = mapFeatures features ([
        (cratesIO.crates."byteorder"."${deps."sonic_server"."1.1.8"."byteorder"}" deps)
        (cratesIO.crates."clap"."${deps."sonic_server"."1.1.8"."clap"}" deps)
        (cratesIO.crates."fst"."${deps."sonic_server"."1.1.8"."fst"}" deps)
        (cratesIO.crates."fst_levenshtein"."${deps."sonic_server"."1.1.8"."fst_levenshtein"}" deps)
        (cratesIO.crates."fst_regex"."${deps."sonic_server"."1.1.8"."fst_regex"}" deps)
        (cratesIO.crates."graceful"."${deps."sonic_server"."1.1.8"."graceful"}" deps)
        (cratesIO.crates."hashbrown"."${deps."sonic_server"."1.1.8"."hashbrown"}" deps)
        (cratesIO.crates."lazy_static"."${deps."sonic_server"."1.1.8"."lazy_static"}" deps)
        (cratesIO.crates."linked_hash_set"."${deps."sonic_server"."1.1.8"."linked_hash_set"}" deps)
        (cratesIO.crates."log"."${deps."sonic_server"."1.1.8"."log"}" deps)
        (cratesIO.crates."rand"."${deps."sonic_server"."1.1.8"."rand"}" deps)
        (cratesIO.crates."regex_syntax"."${deps."sonic_server"."1.1.8"."regex_syntax"}" deps)
        (cratesIO.crates."rocksdb"."${deps."sonic_server"."1.1.8"."rocksdb"}" deps)
        (cratesIO.crates."serde"."${deps."sonic_server"."1.1.8"."serde"}" deps)
        (cratesIO.crates."serde_derive"."${deps."sonic_server"."1.1.8"."serde_derive"}" deps)
        (cratesIO.crates."toml"."${deps."sonic_server"."1.1.8"."toml"}" deps)
        (cratesIO.crates."twox_hash"."${deps."sonic_server"."1.1.8"."twox_hash"}" deps)
        (cratesIO.crates."unicode_segmentation"."${deps."sonic_server"."1.1.8"."unicode_segmentation"}" deps)
        (cratesIO.crates."whatlang"."${deps."sonic_server"."1.1.8"."whatlang"}" deps)
      ]
        ++ (if features.sonic_server."1.1.8".jemallocator or false then [ (cratesIO.crates.jemallocator."${deps."sonic_server"."1.1.8".jemallocator}" deps) ] else []));
      features = mkFeatures (features."sonic_server"."1.1.8" or {});
    };
    features_.sonic_server."1.1.8" = deps: f: updateFeatures f (rec {
      byteorder."${deps.sonic_server."1.1.8".byteorder}".default = true;
      clap."${deps.sonic_server."1.1.8".clap}".default = (f.clap."${deps.sonic_server."1.1.8".clap}".default or false);
      fst."${deps.sonic_server."1.1.8".fst}".default = true;
      fst_levenshtein."${deps.sonic_server."1.1.8".fst_levenshtein}".default = true;
      fst_regex."${deps.sonic_server."1.1.8".fst_regex}".default = true;
      graceful."${deps.sonic_server."1.1.8".graceful}".default = true;
      hashbrown."${deps.sonic_server."1.1.8".hashbrown}".default = true;
      jemallocator."${deps.sonic_server."1.1.8".jemallocator}".default = true;
      lazy_static."${deps.sonic_server."1.1.8".lazy_static}".default = true;
      linked_hash_set."${deps.sonic_server."1.1.8".linked_hash_set}".default = true;
      log."${deps.sonic_server."1.1.8".log}".default = true;
      rand."${deps.sonic_server."1.1.8".rand}".default = true;
      regex_syntax."${deps.sonic_server."1.1.8".regex_syntax}".default = true;
      rocksdb = fold recursiveUpdate {} [
        { "${deps.sonic_server."1.1.8".rocksdb}"."lz4" = true; }
        { "${deps.sonic_server."1.1.8".rocksdb}".default = true; }
      ];
      serde."${deps.sonic_server."1.1.8".serde}".default = true;
      serde_derive."${deps.sonic_server."1.1.8".serde_derive}".default = true;
      sonic_server = fold recursiveUpdate {} [
        { "1.1.8".alloc-jemalloc =
          (f.sonic_server."1.1.8".alloc-jemalloc or false) ||
          (f.sonic_server."1.1.8".default or false) ||
          (sonic_server."1.1.8"."default" or false); }
        { "1.1.8".default = (f.sonic_server."1.1.8".default or true); }
        { "1.1.8".jemallocator =
          (f.sonic_server."1.1.8".jemallocator or false) ||
          (f.sonic_server."1.1.8".alloc-jemalloc or false) ||
          (sonic_server."1.1.8"."alloc-jemalloc" or false); }
      ];
      toml."${deps.sonic_server."1.1.8".toml}".default = true;
      twox_hash."${deps.sonic_server."1.1.8".twox_hash}".default = true;
      unicode_segmentation."${deps.sonic_server."1.1.8".unicode_segmentation}".default = true;
      whatlang."${deps.sonic_server."1.1.8".whatlang}".default = true;
    }) [
      (cratesIO.features_.byteorder."${deps."sonic_server"."1.1.8"."byteorder"}" deps)
      (cratesIO.features_.clap."${deps."sonic_server"."1.1.8"."clap"}" deps)
      (cratesIO.features_.fst."${deps."sonic_server"."1.1.8"."fst"}" deps)
      (cratesIO.features_.fst_levenshtein."${deps."sonic_server"."1.1.8"."fst_levenshtein"}" deps)
      (cratesIO.features_.fst_regex."${deps."sonic_server"."1.1.8"."fst_regex"}" deps)
      (cratesIO.features_.graceful."${deps."sonic_server"."1.1.8"."graceful"}" deps)
      (cratesIO.features_.hashbrown."${deps."sonic_server"."1.1.8"."hashbrown"}" deps)
      (cratesIO.features_.jemallocator."${deps."sonic_server"."1.1.8"."jemallocator"}" deps)
      (cratesIO.features_.lazy_static."${deps."sonic_server"."1.1.8"."lazy_static"}" deps)
      (cratesIO.features_.linked_hash_set."${deps."sonic_server"."1.1.8"."linked_hash_set"}" deps)
      (cratesIO.features_.log."${deps."sonic_server"."1.1.8"."log"}" deps)
      (cratesIO.features_.rand."${deps."sonic_server"."1.1.8"."rand"}" deps)
      (cratesIO.features_.regex_syntax."${deps."sonic_server"."1.1.8"."regex_syntax"}" deps)
      (cratesIO.features_.rocksdb."${deps."sonic_server"."1.1.8"."rocksdb"}" deps)
      (cratesIO.features_.serde."${deps."sonic_server"."1.1.8"."serde"}" deps)
      (cratesIO.features_.serde_derive."${deps."sonic_server"."1.1.8"."serde_derive"}" deps)
      (cratesIO.features_.toml."${deps."sonic_server"."1.1.8"."toml"}" deps)
      (cratesIO.features_.twox_hash."${deps."sonic_server"."1.1.8"."twox_hash"}" deps)
      (cratesIO.features_.unicode_segmentation."${deps."sonic_server"."1.1.8"."unicode_segmentation"}" deps)
      (cratesIO.features_.whatlang."${deps."sonic_server"."1.1.8"."whatlang"}" deps)
    ];


# end

  };

  sonic_server = crates.crates.sonic_server."1.1.8" deps;
  __all = [ (sonic_server {}) ];
  deps.aho_corasick."0.6.10" = {
    memchr = "2.2.0";
  };
  deps.ansi_term."0.11.0" = {
    winapi = "0.3.6";
  };
  deps.arrayvec."0.4.10" = {
    nodrop = "0.1.13";
  };
  deps.atty."0.2.11" = {
    termion = "1.5.1";
    libc = "0.2.50";
    winapi = "0.3.6";
  };
  deps.autocfg."0.1.2" = {};
  deps.backtrace."0.3.14" = {
    cfg_if = "0.1.7";
    rustc_demangle = "0.1.13";
    autocfg = "0.1.2";
    backtrace_sys = "0.1.28";
    libc = "0.2.50";
    winapi = "0.3.6";
  };
  deps.backtrace_sys."0.1.28" = {
    libc = "0.2.50";
    cc = "1.0.32";
  };
  deps.bindgen."0.47.3" = {
    bitflags = "1.0.4";
    cexpr = "0.3.5";
    cfg_if = "0.1.7";
    clang_sys = "0.26.4";
    clap = "2.32.0";
    env_logger = "0.6.1";
    hashbrown = "0.1.8";
    lazy_static = "1.3.0";
    log = "0.4.6";
    peeking_take_while = "0.1.2";
    proc_macro2 = "0.4.27";
    quote = "0.6.11";
    regex = "1.1.2";
    which = "2.0.1";
  };
  deps.bitflags."0.4.0" = {};
  deps.bitflags."1.0.4" = {};
  deps.byteorder."1.3.1" = {};
  deps.cc."1.0.32" = {
    rayon = "1.0.3";
  };
  deps.cexpr."0.3.5" = {
    nom = "4.2.3";
  };
  deps.cfg_if."0.1.7" = {};
  deps.clang_sys."0.26.4" = {
    glob = "0.2.11";
    libc = "0.2.50";
    libloading = "0.5.0";
  };
  deps.clap."2.32.0" = {
    atty = "0.2.11";
    bitflags = "1.0.4";
    strsim = "0.7.0";
    textwrap = "0.10.0";
    unicode_width = "0.1.5";
    vec_map = "0.8.1";
    ansi_term = "0.11.0";
  };
  deps.cloudabi."0.0.3" = {
    bitflags = "1.0.4";
  };
  deps.crossbeam_deque."0.2.0" = {
    crossbeam_epoch = "0.3.1";
    crossbeam_utils = "0.2.2";
  };
  deps.crossbeam_epoch."0.3.1" = {
    arrayvec = "0.4.10";
    cfg_if = "0.1.7";
    crossbeam_utils = "0.2.2";
    lazy_static = "1.3.0";
    memoffset = "0.2.1";
    nodrop = "0.1.13";
    scopeguard = "0.3.3";
  };
  deps.crossbeam_utils."0.2.2" = {
    cfg_if = "0.1.7";
  };
  deps.either."1.5.1" = {};
  deps.env_logger."0.6.1" = {
    atty = "0.2.11";
    humantime = "1.2.0";
    log = "0.4.6";
    regex = "1.1.2";
    termcolor = "1.0.4";
  };
  deps.failure."0.1.5" = {
    backtrace = "0.3.14";
  };
  deps.fs_extra."1.1.0" = {};
  deps.fst."0.3.3" = {
    byteorder = "1.3.1";
    memmap = "0.6.2";
  };
  deps.fst_levenshtein."0.2.1" = {
    fst = "0.3.3";
    utf8_ranges = "1.0.2";
  };
  deps.fst_regex."0.2.2" = {
    fst = "0.3.3";
    regex_syntax = "0.3.9";
    utf8_ranges = "1.0.2";
  };
  deps.fuchsia_cprng."0.1.1" = {};
  deps.glob."0.2.11" = {};
  deps.graceful."0.1.1" = {
    kernel32_sys = "0.2.2";
    nix = "0.7.0";
  };
  deps.hashbrown."0.1.8" = {
    byteorder = "1.3.1";
    scopeguard = "0.3.3";
  };
  deps.humantime."1.2.0" = {
    quick_error = "1.2.2";
  };
  deps.jemalloc_sys."0.3.0" = {
    libc = "0.2.50";
    cc = "1.0.32";
    fs_extra = "1.1.0";
  };
  deps.jemallocator."0.3.0" = {
    jemalloc_sys = "0.3.0";
    libc = "0.2.50";
  };
  deps.kernel32_sys."0.2.2" = {
    winapi = "0.2.8";
    winapi_build = "0.1.1";
  };
  deps.lazy_static."1.3.0" = {};
  deps.libc."0.2.50" = {};
  deps.libloading."0.5.0" = {
    cc = "1.0.32";
    winapi = "0.3.6";
  };
  deps.librocksdb_sys."5.17.2" = {
    libc = "0.2.50";
    bindgen = "0.47.3";
    cc = "1.0.32";
    glob = "0.2.11";
  };
  deps.linked_hash_map."0.5.2" = {};
  deps.linked_hash_set."0.1.3" = {
    linked_hash_map = "0.5.2";
  };
  deps.log."0.4.6" = {
    cfg_if = "0.1.7";
  };
  deps.memchr."2.2.0" = {};
  deps.memmap."0.6.2" = {
    libc = "0.2.50";
    winapi = "0.3.6";
  };
  deps.memoffset."0.2.1" = {};
  deps.nix."0.7.0" = {
    bitflags = "0.4.0";
    cfg_if = "0.1.7";
    libc = "0.2.50";
    void = "1.0.2";
    rustc_version = "0.1.7";
    semver = "0.1.20";
  };
  deps.nodrop."0.1.13" = {};
  deps.nom."4.2.3" = {
    memchr = "2.2.0";
    version_check = "0.1.5";
  };
  deps.num_cpus."1.10.0" = {
    libc = "0.2.50";
  };
  deps.peeking_take_while."0.1.2" = {};
  deps.proc_macro2."0.4.27" = {
    unicode_xid = "0.1.0";
  };
  deps.quick_error."1.2.2" = {};
  deps.quote."0.6.11" = {
    proc_macro2 = "0.4.27";
  };
  deps.rand."0.6.5" = {
    rand_chacha = "0.1.1";
    rand_core = "0.4.0";
    rand_hc = "0.1.0";
    rand_isaac = "0.1.1";
    rand_jitter = "0.1.3";
    rand_os = "0.1.3";
    rand_pcg = "0.1.2";
    rand_xorshift = "0.1.1";
    autocfg = "0.1.2";
    libc = "0.2.50";
    winapi = "0.3.6";
  };
  deps.rand_chacha."0.1.1" = {
    rand_core = "0.3.1";
    autocfg = "0.1.2";
  };
  deps.rand_core."0.3.1" = {
    rand_core = "0.4.0";
  };
  deps.rand_core."0.4.0" = {};
  deps.rand_hc."0.1.0" = {
    rand_core = "0.3.1";
  };
  deps.rand_isaac."0.1.1" = {
    rand_core = "0.3.1";
  };
  deps.rand_jitter."0.1.3" = {
    rand_core = "0.4.0";
    libc = "0.2.50";
    winapi = "0.3.6";
  };
  deps.rand_os."0.1.3" = {
    rand_core = "0.4.0";
    rdrand = "0.4.0";
    cloudabi = "0.0.3";
    fuchsia_cprng = "0.1.1";
    libc = "0.2.50";
    winapi = "0.3.6";
  };
  deps.rand_pcg."0.1.2" = {
    rand_core = "0.4.0";
    autocfg = "0.1.2";
  };
  deps.rand_xorshift."0.1.1" = {
    rand_core = "0.3.1";
  };
  deps.rayon."1.0.3" = {
    crossbeam_deque = "0.2.0";
    either = "1.5.1";
    rayon_core = "1.4.1";
  };
  deps.rayon_core."1.4.1" = {
    crossbeam_deque = "0.2.0";
    lazy_static = "1.3.0";
    libc = "0.2.50";
    num_cpus = "1.10.0";
  };
  deps.rdrand."0.4.0" = {
    rand_core = "0.3.1";
  };
  deps.redox_syscall."0.1.51" = {};
  deps.redox_termios."0.1.1" = {
    redox_syscall = "0.1.51";
  };
  deps.regex."1.1.2" = {
    aho_corasick = "0.6.10";
    memchr = "2.2.0";
    regex_syntax = "0.6.5";
    thread_local = "0.3.6";
    utf8_ranges = "1.0.2";
  };
  deps.regex_syntax."0.3.9" = {};
  deps.regex_syntax."0.6.5" = {
    ucd_util = "0.1.3";
  };
  deps.rocksdb."0.12.1" = {
    libc = "0.2.50";
    librocksdb_sys = "5.17.2";
  };
  deps.rustc_demangle."0.1.13" = {};
  deps.rustc_version."0.1.7" = {
    semver = "0.1.20";
  };
  deps.scopeguard."0.3.3" = {};
  deps.semver."0.1.20" = {};
  deps.serde."1.0.89" = {};
  deps.serde_derive."1.0.89" = {
    proc_macro2 = "0.4.27";
    quote = "0.6.11";
    syn = "0.15.29";
  };
  deps.sonic_server."1.1.8" = {
    byteorder = "1.3.1";
    clap = "2.32.0";
    fst = "0.3.3";
    fst_levenshtein = "0.2.1";
    fst_regex = "0.2.2";
    graceful = "0.1.1";
    hashbrown = "0.1.8";
    jemallocator = "0.3.0";
    lazy_static = "1.3.0";
    linked_hash_set = "0.1.3";
    log = "0.4.6";
    rand = "0.6.5";
    regex_syntax = "0.6.5";
    rocksdb = "0.12.1";
    serde = "1.0.89";
    serde_derive = "1.0.89";
    toml = "0.5.0";
    twox_hash = "1.1.2";
    unicode_segmentation = "1.2.1";
    whatlang = "0.7.0";
  };
  deps.strsim."0.7.0" = {};
  deps.syn."0.15.29" = {
    proc_macro2 = "0.4.27";
    quote = "0.6.11";
    unicode_xid = "0.1.0";
  };
  deps.termcolor."1.0.4" = {
    wincolor = "1.0.1";
  };
  deps.termion."1.5.1" = {
    libc = "0.2.50";
    redox_syscall = "0.1.51";
    redox_termios = "0.1.1";
  };
  deps.textwrap."0.10.0" = {
    unicode_width = "0.1.5";
  };
  deps.thread_local."0.3.6" = {
    lazy_static = "1.3.0";
  };
  deps.toml."0.5.0" = {
    serde = "1.0.89";
  };
  deps.twox_hash."1.1.2" = {
    rand = "0.6.5";
  };
  deps.ucd_util."0.1.3" = {};
  deps.unicode_segmentation."1.2.1" = {};
  deps.unicode_width."0.1.5" = {};
  deps.unicode_xid."0.1.0" = {};
  deps.utf8_ranges."1.0.2" = {};
  deps.vec_map."0.8.1" = {};
  deps.version_check."0.1.5" = {};
  deps.void."1.0.2" = {};
  deps.whatlang."0.7.0" = {
    hashbrown = "0.1.8";
  };
  deps.which."2.0.1" = {
    failure = "0.1.5";
    libc = "0.2.50";
  };
  deps.winapi."0.2.8" = {};
  deps.winapi."0.3.6" = {
    winapi_i686_pc_windows_gnu = "0.4.0";
    winapi_x86_64_pc_windows_gnu = "0.4.0";
  };
  deps.winapi_build."0.1.1" = {};
  deps.winapi_i686_pc_windows_gnu."0.4.0" = {};
  deps.winapi_util."0.1.2" = {
    winapi = "0.3.6";
  };
  deps.winapi_x86_64_pc_windows_gnu."0.4.0" = {};
  deps.wincolor."1.0.1" = {
    winapi = "0.3.6";
    winapi_util = "0.1.2";
  };
}
